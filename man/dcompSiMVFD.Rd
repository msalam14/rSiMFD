% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rSiMFD.R
\name{dcompSiMVFD}
\alias{dcompSiMVFD}
\title{Train a classifier based multivariate FPCA (separate basis) of spatially indexed multivariate functional data}
\usage{
dcompSiMVFD(
  fDATA,
  indxJ,
  spat_indx,
  funARG,
  PVE,
  corrM,
  sub_center = TRUE,
  nknots = 5,
  order_penalty = 2,
  basisT = c("ps", "ps"),
  testFDATA = NULL,
  test_indxJ = NULL,
  ...
)
}
\arguments{
\item{fDATA}{is a list of functional data, length is equal to the number of function}

\item{indxJ}{is a vector of length n that has elements represent m_i}

\item{spat_indx}{is a L by 2 matrix contains spatial locations}

\item{funARG}{is vector of sampled points where functional data were observed. 
This can be generalized for sparse functional data. However this version is only for
dense functional data. Also all the functions are observed at identical sampled point.}

\item{PVE}{is a vector of length 2 for percentage of variation explained. 
The first is used for fpca of each functional variable. The second is for 
eigen decomposition of scores from each of the}

\item{corrM}{is a character specifies the name of spatial correlation}

\item{sub_center}{is a logical vector of length 1 indicates whether the 
functional data would be centered using subject-specific means. If FALSE, 
grand mean will be subtracted.}

\item{testFDATA}{is a list of functional data from the test for which we want 
to obtain the projection onto the reduced dimension}

\item{test_indxJ}{is similar to indxJ, however, it corresponds to the test data provided}
}
\value{
a list with following objects:
\itemize{
 \item n : number of subjects in the data
 \item p : number of features in the data
 \item funARG : functional grid where FD were observed
 \item mFDATA : mean of each feature where center=TRUE
 \item SubEigenF : estimated eigenfunctions
 \item Zeta : projection of subject means on to the estimated eigenfunctions
}
}
\description{
Train a classifier based multivariate FPCA (separate basis) of spatially indexed multivariate functional data
}
\examples{
# Load required package
library(mvtnorm)

# Example parameters
n <- 25
m_i <- rep(4, n)

# Spatial index: 5x5 grid on [0,1]^2
spat_indx <- as.matrix(expand.grid(seq(0, 1, length.out = 5),
                                   seq(0, 1, length.out = 5)))

# Functional argument (time points)
funARG <- seq(0, 1, length.out = 20)

# Mean function: p = 2 dimensional
meanFUN <- function(t) {
  c(sin(2 * pi * t), cos(2 * pi * t))
}

# Basis functions for p = 2
basisFUN <- list(
  function(t) cbind(sin(pi * t), cos(pi * t)),
  function(t) cbind(sin(2 * pi * t), cos(2 * pi * t))
)

# Variance of zeta (2 components)
zetaVAR <- c(1, 0.5)

# Correlation functions for xi
corrFUN <- list(
  function(r) corSpatialVal(r,d=0.3,nugget = 0.15,type = "exponential"),      # exponential correlation
  function(r) corSpatialVal(r,d=0.45,nugget = 0.05,type = "spherical") # slower decay
)

# Spatial variance and noise
spatVAR <- c(1, 0.5)
sigma2 <- 0.1

# Generate data
set.seed(123)
sim_data <- rsimvFD(n, m_i, spat_indx, funARG,
                    meanFUN, basisFUN, zetaVAR,
                    corrFUN, spatVAR, sigma2)

fit_rSiMVFD<-dcompSiMVFD(fDATA=sim_data$data,
                         indxJ=m_i,
                         spat_indx=spat_indx,
                         funARG=funARG,
                         PVE=c(0.95,0.95),
                         corrM="spherical",
                         sub_center=TRUE,
                         nknots=5,
                         order_penalty=2,
                         basisT=c("ps","ps"),
                         testFDATA=NULL,
                         test_indxJ=NULL)

# pedicted spatial random field (RF) for different k
head(fit_rSiMVFD$XiS)

# predictors for building a classifier

head(fit_rSiMVFD$trainRD) # first and second order moments for each spatial RF
}
